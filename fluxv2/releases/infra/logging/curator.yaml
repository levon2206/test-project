apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: curator
  namespace: logging
spec:
  releaseName: curator
  chart:
    spec:
      chart: elasticsearch-curator
      version: 3.2.3
      sourceRef:
        kind: HelmRepository
        name: curator
        namespace: logging
  interval: 1m
  install:
    remediation:
      retries: 3
  values:
    # Default values for elasticsearch-curator.
    # This is a YAML-formatted file.
    # Declare variables to be passed into your templates.

    cronjob:
      # At 04:00 every day
      schedule: "0 4 * * *"
      annotations: {}
      labels: {}
      concurrencyPolicy: ""
      failedJobsHistoryLimit: ""
      successfulJobsHistoryLimit: ""
      jobRestartPolicy: Never
      startingDeadlineSeconds: ""

    pod:
      annotations: {}
      labels: {}

    rbac:
      # Specifies whether RBAC should be enabled
      enabled: true

    serviceAccount:
      # Specifies whether a ServiceAccount should be created
      create: true
      # The name of the ServiceAccount to use.
      # If not set and create is true, a name is generated using the fullname template
      name:
      annotations: {}


    psp:
      # Specifies whether a podsecuritypolicy should be created
      create: false

    image:
      repository: untergeek/curator
      tag: 8.0.4
      pullPolicy: IfNotPresent

    hooks:
      install: false
      upgrade: false

    # run curator in dry-run mode
    dryrun: false

    command: []
    env: {}

    envFromSecrets:
      ELASTIC_USERNAME:
        from:
          secret: elasticsearch-master-credentials
          key: username
      ELASTIC_PASSWORD:
        from:
          secret: elasticsearch-master-credentials
          key: password

    configMaps:
      # Delete indices older than 30 days
      action_file_yml: |-
        ---
        actions:
          dev:
            action: delete_indices
            description: "Clean up ES by deleting old indices dev"
            options:
              timeout_override:
              continue_if_exception: False
              disable_action: False
              ignore_empty_list: True
            filters:
            - filtertype: pattern
              kind: prefix
              value: dev-
              exclude:
            - filtertype: age
              source: name
              direction: older
              timestring: '%Y.%m.%d'
              unit: days
              unit_count: 5
              exclude:


      # Having config_yaml WILL override the other config
      config_yml: |-
        ---
        elasticsearch:
          client:
            hosts:
              - https://elasticsearch-master.logging:9200
            request_timeout: 30
            verify_certs: True
            ca_certs: /certs/ca.crt
            client_cert: /certs/tls.crt
            client_key: /certs/tls.key
          other_settings:
            master_only: False
            skip_version_test: False
            username: ${ELASTIC_USERNAME}
            password: ${ELASTIC_PASSWORD}
        logging:
          loglevel: INFO
          logfile:
          logformat: default
          blacklist: ['elasticsearch', 'urllib3']


    resources:
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

    priorityClassName: ""

    # extraVolumes and extraVolumeMounts allows you to mount other volumes
    # Example Use Case: mount ssl certificates when elasticsearch has tls enabled
    extraVolumes:
    - name: elasticsearch-master-certs
      secret:
        defaultMode: 0755
        secretName: elasticsearch-master-certs
    extraVolumeMounts:
    - name: elasticsearch-master-certs
      mountPath: /certs
      readOnly: true

    # Add your own init container or uncomment and modify the given example.
    extraInitContainers: {}
      ## Don't configure S3 repository till Elasticsearch is reachable.
      ## Ensure that it is available at http://elasticsearch:9200
      ##
      # elasticsearch-s3-repository:
      #   image: jwilder/dockerize:latest
      #   imagePullPolicy: "IfNotPresent"
      #   command:
      #   - "/bin/sh"
      #   - "-c"
      #   args:
      #   - |
      #     ES_HOST=elasticsearch
      #     ES_PORT=9200
      #     ES_REPOSITORY=backup
      #     S3_REGION=us-east-1
      #     S3_BUCKET=bucket
      #     S3_BASE_PATH=backup
      #     S3_COMPRESS=true
      #     S3_STORAGE_CLASS=standard
      #     apk add curl --no-cache && \
      #     dockerize -wait http://${ES_HOST}:${ES_PORT} --timeout 120s && \
      #     cat <<EOF | curl -sS -XPUT -H "Content-Type: application/json" -d @- http://${ES_HOST}:${ES_PORT}/_snapshot/${ES_REPOSITORY} \
      #     {
      #       "type": "s3",
      #       "settings": {
      #         "bucket": "${S3_BUCKET}",
      #         "base_path": "${S3_BASE_PATH}",
      #         "region": "${S3_REGION}",
      #         "compress": "${S3_COMPRESS}",
      #         "storage_class": "${S3_STORAGE_CLASS}"
      #       }
      #     }

    securityContext:
      runAsUser: 16  # run as cron user instead of root
